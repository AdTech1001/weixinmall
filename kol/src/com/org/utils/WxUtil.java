package com.org.utils;

import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;

import com.org.controller.WxMenu;
import com.org.log.LogUtil;
import com.org.log.impl.LogUtilMg;
import com.org.util.CT;
import com.org.utils.http.HttpTool;
import com.org.utils.http.impl.HttpApacheClient;


public class WxUtil {
	private final static String TOKEN = "sandpay123"; // 配置到配置文件
	private static String WX_TOKEN = "wxToken"; // 微信端的token
	private static String WX_TICKET = "wxTicket"; // 微信端的ticket
	private static int CACHE_TIME = 7000; // 微信端的ticket

	public static void main(String[] args) throws InterruptedException {
		//autoRun();
	}

	public static boolean checkSignature(String signature, String timestamp,
			String nonce) {
		String[] paramArr = { TOKEN, timestamp, nonce };
		Arrays.sort(paramArr);

		String content = paramArr[0].concat(paramArr[1]).concat(paramArr[2]);
		// String cipher = SHA1Util.hex_sha1(content);
		String cipher = SHA1Util.sha1(content);
		if (StringUtils.isEmpty(cipher)) {
			return false;
		} else {
			return cipher.equalsIgnoreCase(signature);
		}
	}

	public static String initToken() {
		JSONObject requestJson = new JSONObject();
		String grant_type = SmpPropertyUtil.getValue("wx", "grant_type");
		String remoteUrl = SmpPropertyUtil.getValue("wx", "wx_token_url");
		String appid = SmpPropertyUtil.getValue("wx", "appid");
		String secret = SmpPropertyUtil.getValue("wx", "secret");

		requestJson.put("grant_type", grant_type); // 微信接口
		requestJson.put("appid", appid);
		requestJson.put("secret", secret);

		HttpTool http = new HttpApacheClient();
		JSONObject responseJson = http.httpPost(requestJson, remoteUrl, CT.ENCODE_UTF8);

		// TODO 存放到memcache
//		try {
//			Memcache.getInstance().setValue(WX_TOKEN, CACHE_TIME, responseJson.getString("access_token"));
//			return responseJson.getString("access_token");
//		} catch (CacheClientException e) {
//			e.printStackTrace();
//		}
		return null;
	}

	/**
	 * 根据token请求ticket
	 * 
	 * @return
	 */
	public static boolean initTicket(String token) {
		JSONObject requestJson = new JSONObject();
		String remoteUrl = SmpPropertyUtil.getValue("wx", "wx_ticket_url");
		String type = SmpPropertyUtil.getValue("wx", "type_for_ticket");

		requestJson.put("access_token", token); // 微信接口
		requestJson.put("type", type);

		HttpTool http = new HttpApacheClient();
		JSONObject responseJson = http.httpPost(requestJson, remoteUrl, CT.ENCODE_UTF8);

		if (0 == responseJson.getInt("errcode")) {
			// 获取成功
			// TODO 存放到memcache
//			try {
//				Memcache.getInstance().setValue(WX_TICKET, CACHE_TIME, responseJson.getString("ticket"));
//				return true;
//			} catch (CacheClientException e) {
//				e.printStackTrace();
				return false;
//			}
		} else {
			LogUtil.log(WxUtil.class, "initTicket 失败：" + responseJson.get("errmsg"), null, LogUtilMg.LOG_DEBUG, CT.LOG_PATTERN_NULL);
			return false;
		}
	}

	public static boolean init() {
		String token = initToken();
		boolean res = false;
		if (StringUtils.isNotEmpty(token)) {
			res = initTicket(token);
		}
		return res;
	}

	/**
	 * 从memcache获取token
	 * @return
	 */
	public static String getToken() {
		//
		return null;
		//return Memcache.getInstance().getValue(WX_TOKEN);
	}

	/**
	 * 手动拉出来的token
	 * 
	 * @return
	 */
	public static String getTemporaryToken() {
		return "nYKE_6lhfOWxN2rrCSZPlMNhVMctLhMwddYA926KIzNIsRhNIrdRdw7QlVWBiR5OnIwNgfgA-MXWpgjhvydD55HDh3alPj5SPdWgBTszoaYTQMeAIACZV";
	}
	
	/**
	 * 
	 * @param timeInterval
	 */
	public static void autoRun() {
		// 同时启一个定时任务,每两小时执行一次
		Calendar calendar = Calendar.getInstance();

		Long timeInterval = Long.valueOf(SmpPropertyUtil.getValue("wx", "time_interval"));
		Date date = calendar.getTime(); // 第一次执行定时任务的时间
		Timer timer = new Timer();
		WxTimerTask task = new WxTimerTask();
		// 安排指定的任务在指定的时间开始进行重复的固定延迟执行。
		timer.schedule(task, date, timeInterval * 1000);
	}

	/**
	 * 定义菜单公众号在线返回菜单,解析完xml得到数据后，根据用户输入的内容来返回定义菜单
	 * 
	 * @param xmlJson
	 * @return
	 */
	public static String createMenu(JSONObject xmlJson) {
		String Content = xmlJson.getString("Content");
		String menuStr = matchMenu(Content);

		String ToUserName = xmlJson.getString("ToUserName");
		String FromUserName = xmlJson.getString("FromUserName");
		String CreateTime = xmlJson.getString("CreateTime");
		String MsgType = xmlJson.getString("MsgType");
		//String MsgId = xmlJson.getString("MsgId");

		StringBuffer sb = new StringBuffer();
		sb.append("<xml>");
		sb.append("<ToUserName><![CDATA[").append(FromUserName).append("]]></ToUserName>");
		sb.append("<FromUserName><![CDATA[").append(ToUserName).append("]]></FromUserName>");
		sb.append("<CreateTime>").append(CreateTime).append("</CreateTime>");
		sb.append("<MsgType><![CDATA[").append(MsgType).append("]]></MsgType>");
		sb.append("<Content><![CDATA[").append(menuStr).append("]]></Content>");
		sb.append("</xml>");
		return sb.toString();
	}

	/**
	 * 根据用户输入的内容判断， 是否在菜单中, 如果在则返回该菜单项，如果不在， 则返回所有菜单
	 * 
	 * @param Content
	 * @return 
	 */
	public static String matchMenu(String content) {
		WxMenu wxMenu = WxMenu.getInstance();
		if (wxMenu.containsMenu(content)) {
			return wxMenu.get(content);
		}
		return wxMenu.getAll();
	}

	/**
	 * 本地签名, 微信接口签名用的 noncestr和timestamp必须与wx.config中的nonceStr和timestamp相同。
	 * @param timestamp
	 * @param nonceStr
	 * @param url
	 *            必须是调用JS接口页面的完整URL
	 * @return
	 */
	public static String localSign(String timestamp, String noncestr, String url) {
		StringBuffer temp = new StringBuffer();
		//String ticket = Memcache.getInstance().getValue(WX_TICKET);
		String ticket = "";
		// jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg&noncestr=Wm3WZYTPz0wzccnW&timestamp=1414587457&url=http://mp.weixin.qq.com?params=value
		temp.append("jsapi_ticket=").append(ticket).append("&");
		temp.append("noncestr=").append(noncestr).append("&");
		temp.append("timestamp=").append(timestamp).append("&");
		temp.append("url=").append(url);

		return SHA1Util.sha1(temp.toString());
	}
/*
	private class TimerManager {

		// 时间间隔
		private static final long PERIOD_DAY = 7000 * 1000;

		public TimerManager() {
			Calendar calendar = Calendar.getInstance();

			*//*** 定制每日2:00执行方法 ***//*
			calendar.set(Calendar.HOUR_OF_DAY, 2);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);

			Date date = calendar.getTime(); // 第一次执行定时任务的时间

			// 如果第一次执行定时任务的时间 小于 当前的时间
			// 此时要在 第一次执行定时任务的时间 加一天，以便此任务在下个时间点执行。如果不加一天，任务会立即执行。
			 要的就是立即执行
			    if (date.before(new Date())) {
				    date = this.addDay(date, 1);
			    }
			

			Timer timer = new Timer();

			NFDFlightDataTimerTask task = new NFDFlightDataTimerTask();
			// 安排指定的任务在指定的时间开始进行重复的固定延迟执行。
			timer.schedule(task, date, PERIOD_DAY);
		}

		// 增加或减少天数
		public Date addDay(Date date, int num) {
			Calendar startDT = Calendar.getInstance();
			startDT.setTime(date);
			startDT.add(Calendar.DAY_OF_MONTH, num);
			return startDT.getTime();
		}

	}*/

	private static class WxTimerTask extends TimerTask {
		@Override
		public void run() {
			System.out.println("执行定时获取微信任务");
			LogUtil.log(WxTimerTask.class, "执行定时获取微信任务", null, LogUtilMg.LOG_DEBUG, CT.LOG_PATTERN_NULL);
			init();
		}
	}

	/*
	 * 错误码：
	 * 
	 * -1 系统繁忙，此时请开发者稍候再试 0 请求成功 40001
	 * 获取access_token时AppSecret错误，或者access_token无效
	 * 。请开发者认真比对AppSecret的正确性，或查看是否正在为恰当的公众号调用接口 40002 不合法的凭证类型 40003
	 * 不合法的OpenID，请开发者确认OpenID（该用户）是否已关注公众号，或是否是其他公众号的OpenID 40004 不合法的媒体文件类型
	 * 40005 不合法的文件类型 40006 不合法的文件大小 40007 不合法的媒体文件id 40008 不合法的消息类型 40009
	 * 不合法的图片文件大小 40010 不合法的语音文件大小 40011 不合法的视频文件大小 40012 不合法的缩略图文件大小 40013
	 * 不合法的AppID，请开发者检查AppID的正确性，避免异常字符，注意大小写 40014
	 * 不合法的access_token，请开发者认真比对access_token的有效性（如是否过期），或查看是否正在为恰当的公众号调用接口 40015
	 * 不合法的菜单类型 40016 不合法的按钮个数 40017 不合法的按钮个数 40018 不合法的按钮名字长度 40019 不合法的按钮KEY长度
	 * 40020 不合法的按钮URL长度 40021 不合法的菜单版本号 40022 不合法的子菜单级数 40023 不合法的子菜单按钮个数 40024
	 * 不合法的子菜单按钮类型 40025 不合法的子菜单按钮名字长度 40026 不合法的子菜单按钮KEY长度 40027 不合法的子菜单按钮URL长度
	 * 40028 不合法的自定义菜单使用用户 40029 不合法的oauth_code 40030 不合法的refresh_token 40031
	 * 不合法的openid列表 40032 不合法的openid列表长度 40033 不合法的请求字符，不能包含uxxxx格式的字符 40035
	 * 不合法的参数 40038 不合法的请求格式 40039 不合法的URL长度 40050 不合法的分组id 40051 分组名字不合法 40117
	 * 分组名字不合法 40118 media_id大小不合法 40119 button类型错误 40120 button类型错误 40121
	 * 不合法的media_id类型 40132 微信号不合法 40137 不支持的图片格式 41001 缺少access_token参数 41002
	 * 缺少appid参数 41003 缺少refresh_token参数 41004 缺少secret参数 41005 缺少多媒体文件数据 41006
	 * 缺少media_id参数 41007 缺少子菜单数据 41008 缺少oauth code 41009 缺少openid 42001
	 * access_token超时
	 * ，请检查access_token的有效期，请参考基础支持-获取access_token中，对access_token的详细机制说明 42002
	 * refresh_token超时 42003 oauth_code超时 43001 需要GET请求 43002 需要POST请求 43003
	 * 需要HTTPS请求 43004 需要接收者关注 43005 需要好友关系 44001 多媒体文件为空 44002 POST的数据包为空 44003
	 * 图文消息内容为空 44004 文本消息内容为空 45001 多媒体文件大小超过限制 45002 消息内容超过限制 45003 标题字段超过限制
	 * 45004 描述字段超过限制 45005 链接字段超过限制 45006 图片链接字段超过限制 45007 语音播放时间超过限制 45008
	 * 图文消息超过限制 45009 接口调用超过限制 45010 创建菜单个数超过限制 45015 回复时间超过限制 45016 系统分组，不允许修改
	 * 45017 分组名字过长 45018 分组数量超过上限 46001 不存在媒体数据 46002 不存在的菜单版本 46003 不存在的菜单数据
	 * 46004 不存在的用户 47001 解析JSON/XML内容错误 48001
	 * api功能未授权，请确认公众号已获得该接口，可以在公众平台官网-开发者中心页中查看接口权限 50001 用户未授权该api 50002
	 * 用户受限，可能是违规后接口被封禁 61451 参数错误(invalid parameter) 61452 无效客服账号(invalid
	 * kf_account) 61453 客服帐号已存在(kf_account exsited) 61454
	 * 客服帐号名长度超过限制(仅允许10个英文字符，不包括@及@后的公众号的微信号)(invalid kf_acount length) 61455
	 * 客服帐号名包含非法字符(仅允许英文+数字)(illegal character in kf_account) 61456
	 * 客服帐号个数超过限制(10个客服账号)(kf_account count exceeded) 61457 无效头像文件类型(invalid
	 * file type) 61450 系统错误(system error) 61500 日期格式错误 61501 日期范围错误 9001001
	 * POST数据参数不合法 9001002 远端服务不可用 9001003 Ticket不合法 9001004 获取摇周边用户信息失败 9001005
	 * 获取商户信息失败 9001006 获取OpenID失败 9001007 上传文件缺失 9001008 上传素材的文件类型不合法 9001009
	 * 上传素材的文件尺寸不合法 9001010 上传失败 9001020 帐号不合法 9001021 已有设备激活率低于50%，不能新增设备
	 * 9001022 设备申请数不合法，必须为大于0的数字 9001023 已存在审核中的设备ID申请 9001024 一次查询设备ID数量不能超过50
	 * 9001025 设备ID不合法 9001026 页面ID不合法 9001027 页面参数不合法 9001028 一次删除页面ID数量不能超过10
	 * 9001029 页面已应用在设备中，请先解除应用关系再删除 9001030 一次查询页面ID数量不能超过50 9001031 时间区间不合法
	 * 9001032 保存设备与页面的绑定关系参数错误 9001033 门店ID不合法 9001034 设备备注信息过长 9001035
	 * 设备申请参数不合法 9001036 查询起始值begin不合法
	 */
}
